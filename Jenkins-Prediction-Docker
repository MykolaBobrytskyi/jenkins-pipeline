pipeline {
  agent any
  environment {
    BRANCH = "master"
    GIT_CREDENTIALS = "gl-ml-training-creds"
    S3_DATA_FOLDER = "gl-ml-training-data"
    S3_MODELS_FOLDER = "gl-ml-training-models"
    REGION = "eu-central-1"
    AWS_ACCESS_KEY_ID = credentials("aws_access_key_id")
    AWS_SECRET_ACCESS_KEY = credentials("aws_secret_access_key")
  }
  parameters {
    extendedChoice bindings: '', defaultValue: '', description: 'Model version saved in S3 bucket', descriptionPropertyValue: '', groovyClasspath: '', groovyScript: '''def modelsList = \'/usr/local/bin/aws s3api list-objects-v2 --bucket gl-ml-training-models --output text --delimiter / --prefix model\'.execute() | \'/usr/bin/cut -f 3\'.execute() | \'sed 1d\'.execute()
  def output = modelsList.in.text
  return output.split()''', multiSelectDelimiter: ',', name: 'MODEL_VERSION', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_SINGLE_SELECT', visibleItemCount: 100
  }
  stages {
    stage("SCM Checkout") {
      steps {
        git branch: env.BRANCH, credentialsId: env.GIT_CREDENTIALS, url: "https://github.com/MykolaBobrytskyi/jenkins-pipeline.git", poll: false
      }
    }
    stage('Generate AWS config') {
      steps {
      sh "./scripts/generate_aws_config.sh ${env.REGION} ${env.AWS_ACCESS_KEY_ID} ${env.AWS_SECRET_ACCESS_KEY}"
      }
    }
    stage('Build docker image') {
      steps {
      sh "docker build --no-cache -t model-prediction-${env.JOB_NAME}-${env.BUILD_NUMBER} --file Dockerfile_Prediction ."
      }
    }
    stage("Run prediction") {
      steps {
        sh "docker run -it model-prediction-${env.JOB_NAME}-${env.BUILD_NUMBER}"
        // sh "./scripts/prediction.sh ${params.MODEL_VERSION}"
      }
    }
  }
  post {
    always {
      deleteDir()
    }
  }
}
